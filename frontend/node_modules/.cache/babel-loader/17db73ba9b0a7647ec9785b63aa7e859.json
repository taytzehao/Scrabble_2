{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Main_game\\\\Board.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useDrop } from 'react-dnd';\nimport './Board.css';\nimport { UserContext, SocketContext } from '../../UserContext.js';\nimport { GamesContext, PlayerListContext, BlocksContext } from '../GamesContext.js';\nimport { Tile } from '../Sachet.js';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst block_type = {\n  dw: {\n    className: \"bl dw\",\n    innerHTML: \"Double Word Score\"\n  },\n  tw: {\n    className: \"bl tw\",\n    innerHTML: \"Triple Word Score\"\n  },\n  dl: {\n    className: \"bl dl\",\n    innerHTML: \"Double Letter Score\"\n  },\n  tl: {\n    className: \"bl tl\",\n    innerHTML: \"Triple Letter Score\"\n  },\n  st: {\n    className: \"bl dw st\",\n    innerHTML: \"\"\n  },\n  default: {\n    className: \"bl default\",\n    innerHTML: \"\"\n  }\n};\n\nfunction Block(values) {\n  _s();\n\n  const websocket = useContext(SocketContext);\n  const {\n    profile,\n    setprofile\n  } = useContext(UserContext);\n  const {\n    playerlistState,\n    setplayerlistState\n  } = useContext(PlayerListContext);\n  const {\n    gameState,\n    setgameState\n  } = useContext(GamesContext);\n  const {\n    boardState,\n    setboardState\n  } = useContext(BlocksContext);\n  const playerlistRef = useRef(null);\n  const gamestateRef = useRef(null);\n  const boardstateRef = useRef(null);\n  playerlistRef.current = playerlistState;\n  gamestateRef.current = gameState;\n  boardstateRef.current = boardState;\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: \"active\",\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    }),\n    canDrop: () => !values.block.content && gamestateRef.current.player_turn == gamestateRef.current.your_index,\n    drop: tile => addTile(tile)\n  }));\n  const dragOverstyle = {\n    backgroundColor: isOver && \"grey\"\n  };\n\n  const addTile = tile_drag => {\n    let drag_block;\n    let drag_container;\n    let drop_block = boardstateRef.current.blocks[values.block.index];\n    let update_just_added = gamestateRef.current.just_added;\n\n    if (tile_drag.container_index || tile_drag.container_index == 0) {\n      let tile = playerlistRef.current[gamestateRef.current.your_index].tiles[tile_drag.container_index];\n\n      if (tile.alphabet == \" \") {\n        let wrong_input = true;\n\n        while (wrong_input) {\n          let alphabet = window.prompt(\"Please enter your desired alphabet\");\n\n          if (alphabet.length == 1 && alphabet.toLowerCase() != alphabet.toUpperCase()) {\n            alphabet = alphabet.toUpperCase();\n            tile.alphabet = alphabet;\n            wrong_input = false;\n          }\n        }\n      }\n\n      tile.placed = true;\n      tile.just_added = true;\n      tile.container_index = undefined;\n      tile.board_index = values.block.index;\n      tile.canDrop = false;\n      drop_block.content = tile;\n      drag_container = playerlistRef.current[gamestateRef.current.your_index].tiles;\n      drag_container.splice(tile_drag.container_index, 1);\n\n      for (let i = 0; i < drag_container.length; i++) {\n        drag_container[i].container_index = i;\n      }\n\n      update_just_added.push(values.block.index);\n      values.container_board(drag_container, drop_block, update_just_added);\n    } else {\n      drag_block = boardstateRef.current.blocks[tile_drag.board_index];\n      let tile = drag_block.content;\n      tile.container_index = undefined;\n      tile.board_index = values.block.index;\n      drop_block.content = tile;\n      drag_block.content = null;\n      let initial_index = update_just_added.indexOf(drag_block.index);\n      update_just_added.splice(initial_index, 1);\n      update_just_added.push(drop_block.index);\n      values.board_board(drag_block, drop_block, update_just_added);\n    }\n\n    websocket.current.emit(\"emit_drop_block\", {\n      room_id: gamestateRef.current.room_id,\n      drag_container: tile_drag.container_index == 0 || tile_drag.container_index ? drag_container : tile_drag.container_index,\n      drag_block: tile_drag.board_index == 0 || tile_drag.board_index ? drag_block : tile_drag.board_index,\n      drop_block: drop_block,\n      just_added: update_just_added\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: block_type[values.block.type].className,\n    ref: drop,\n    style: dragOverstyle,\n    children: [values.block.content && /*#__PURE__*/_jsxDEV(Tile, {\n      tile: values.block.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 39\n    }, this), block_type[values.block.type].innerHTML]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Block, \"lkxIerU+Lm6Cmwgdxrj+AQ48BwA=\", false, function () {\n  return [useDrop];\n});\n\n_c = Block;\n\nclass Blocks {\n  constructor() {\n    this.blocks = [];\n    this.row_length = 15;\n    this.column_length = 15;\n    this.tw_coordinate = ['14,14', '7,14', '0,14', '14,7', '0,7', '14,0', '7,0', '0,0'];\n    this.dw_coordinate = [, '13,13', '1,13', '12,12', '2,12', '11,11', '3,11', '10,10', '4,10', '10,4', '4,4', '11,3', '3,3', '12,2', '2,2', '13,1', '1,1'];\n    this.dl_coordinate = ['11,14', '3,14', '8,12', '6,12', '14,11', '7,11', '0,11', '12,8', '8,8', '6,8', '2,8', '11,7', '3,7', '12,6', '8,6', '6,6', '2,6', '14,3', '7,3', '0,3', '8,2', '6,2', '11,0', '3,0'];\n    this.tl_coordinate = ['9,13', '5,13', '13,9', '9,9', '5,9', '1,9', '13,5', '9,5', '5,5', '1,5', '9,1', '5,1'];\n    this.st_coordinate = ['7,7'];\n    this.construct_blocks();\n  }\n\n  construct_blocks() {\n    let pos = 0;\n\n    for (let y = 0; y < this.row_length; ++y) {\n      for (let x = 0; x < this.column_length; ++x) {\n        let temp_coord = x.toString() + \",\" + y.toString();\n\n        switch (temp_coord) {\n          case this.tw_coordinate[this.tw_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"tw\",\n              content: null,\n              index: pos\n            });\n            this.tw_coordinate.pop();\n            break;\n\n          case this.dw_coordinate[this.dw_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"dw\",\n              content: null,\n              index: pos\n            });\n            this.dw_coordinate.pop();\n            break;\n\n          case this.dl_coordinate[this.dl_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"dl\",\n              content: null,\n              index: pos\n            });\n            this.dl_coordinate.pop();\n            break;\n\n          case this.tl_coordinate[this.tl_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"tl\",\n              content: null,\n              index: pos\n            });\n            this.tl_coordinate.pop();\n            break;\n\n          case this.st_coordinate[this.st_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"st\",\n              content: null,\n              index: pos\n            });\n            this.st_coordinate.pop();\n            break;\n\n          default:\n            this.blocks.push({\n              type: \"default\",\n              content: null,\n              index: pos\n            });\n            break;\n        }\n\n        pos += 1;\n      }\n    }\n\n    delete this.tw_coordinate;\n    delete this.dw_coordinate;\n    delete this.dl_coordinate;\n    delete this.tl_coordinate;\n    delete this.st_coordinate;\n  }\n\n}\n\nfunction Board(values) {\n  _s2();\n\n  const websocket = useContext(SocketContext);\n  const {\n    profile,\n    setprofile\n  } = useContext(UserContext);\n  const {\n    gameState,\n    setgameState\n  } = useContext(GamesContext);\n  const {\n    boardState,\n    setboardState\n  } = useContext(BlocksContext);\n  const {\n    playerlistState,\n    setplayerlistState\n  } = useContext(PlayerListContext);\n  const socket2 = useRef();\n  socket2.current = io.connect(\"http://localhost:5500\");\n  const playerlistRef = useRef(null);\n  const gamestateRef = useRef(null);\n  const boardstateRef = useRef(null);\n  playerlistRef.current = playerlistState;\n  gamestateRef.current = gameState;\n  boardstateRef.current = boardState;\n\n  function container_board_state(drag_container, drop_block, just_added) {\n    setboardState(prevblockstate => {\n      let tempblockstate = { ...prevblockstate\n      };\n      tempblockstate.blocks[drop_block.index] = drop_block;\n      return tempblockstate;\n    });\n    setgameState(prevgamestate => ({ ...prevgamestate,\n      just_added: just_added\n    }));\n    setplayerlistState(prevplayerlist => {\n      let temp_playerlist = [...prevplayerlist];\n      temp_playerlist[gamestateRef.current.player_turn].tiles = drag_container;\n      return temp_playerlist;\n    });\n  }\n\n  function board_board_state(drag_block, drop_block, just_added) {\n    setboardState(prevblockstate => {\n      let tempblockstate = { ...prevblockstate\n      };\n      tempblockstate.blocks[drag_block.index] = drag_block;\n      tempblockstate.blocks[drop_block.index] = drop_block;\n      return tempblockstate;\n    });\n    setgameState(prevgamestate => ({ ...prevgamestate,\n      just_added: just_added\n    }));\n  }\n\n  useEffect(() => {\n    websocket.current.on(\"drop_tile_block\", socket_out => {\n      if (socket_out.drag_container) {\n        container_board_state(socket_out.drag_container, socket_out.drop_block, socket_out.just_added);\n      } else {\n        console.log(\"DRAG_BLOCK\");\n        board_board_state(socket_out.drag_block, socket_out.drop_block, socket_out.just_added);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board_holder\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: values.blocks_class.blocks.map((block, pos) => /*#__PURE__*/_jsxDEV(Block, {\n        block: block,\n        container_board: container_board_state,\n        board_board: board_board_state\n      }, pos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Board, \"RrqQfJApH9JEXO1TOOTsFJrcjUc=\");\n\n_c2 = Board;\nexport { Board, Blocks };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Block\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Main_game/Board.js"],"names":["React","useState","useContext","useEffect","useRef","useDrop","UserContext","SocketContext","GamesContext","PlayerListContext","BlocksContext","Tile","io","block_type","dw","className","innerHTML","tw","dl","tl","st","default","Block","values","websocket","profile","setprofile","playerlistState","setplayerlistState","gameState","setgameState","boardState","setboardState","playerlistRef","gamestateRef","boardstateRef","current","isOver","drop","accept","collect","monitor","canDrop","block","content","player_turn","your_index","tile","addTile","dragOverstyle","backgroundColor","tile_drag","drag_block","drag_container","drop_block","blocks","index","update_just_added","just_added","container_index","tiles","alphabet","wrong_input","window","prompt","length","toLowerCase","toUpperCase","placed","undefined","board_index","splice","i","push","container_board","initial_index","indexOf","board_board","emit","room_id","type","Blocks","constructor","row_length","column_length","tw_coordinate","dw_coordinate","dl_coordinate","tl_coordinate","st_coordinate","construct_blocks","pos","y","x","temp_coord","toString","pop","Board","socket2","connect","container_board_state","prevblockstate","tempblockstate","prevgamestate","prevplayerlist","temp_playerlist","board_board_state","on","socket_out","console","log","blocks_class","map"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect,useRef} from 'react';\r\nimport {useDrop} from 'react-dnd';\r\nimport './Board.css'\r\nimport {UserContext,SocketContext} from '../../UserContext.js'\r\nimport {GamesContext,PlayerListContext,BlocksContext} from '../GamesContext.js';\r\nimport {Tile} from '../Sachet.js'\r\nimport io from 'socket.io-client';\r\n\r\n\r\nconst block_type = {\r\n  dw:{className:\"bl dw\",innerHTML:\"Double Word Score\"},\r\n  tw:{className:\"bl tw\",innerHTML:\"Triple Word Score\"},\r\n  dl:{className:\"bl dl\",innerHTML:\"Double Letter Score\"},\r\n  tl:{className:\"bl tl\",innerHTML:\"Triple Letter Score\"},\r\n  st:{className:\"bl dw st\",innerHTML:\"\"},\r\n  default:{className:\"bl default\",innerHTML:\"\"},\r\n};\r\n\r\nfunction Block(values){ \r\n    const websocket=useContext(SocketContext)\r\n    const {profile,setprofile}=useContext(UserContext)\r\n    const {playerlistState,setplayerlistState}=useContext(PlayerListContext)\r\n    const {gameState,setgameState}=useContext(GamesContext)   \r\n    const {boardState,setboardState}=useContext(BlocksContext)\r\n    const playerlistRef=useRef(null);\r\n    const gamestateRef=useRef(null);\r\n    const boardstateRef=useRef(null);\r\n    playerlistRef.current=playerlistState\r\n    gamestateRef.current=gameState\r\n    boardstateRef.current=boardState\r\n    \r\n    const [{isOver},drop] = useDrop(()=>({\r\n        accept: \"active\",\r\n        collect:monitor=>({\r\n            isOver:!!monitor.isOver(),\r\n        }),\r\n        canDrop: ()=> !values.block.content && gamestateRef.current.player_turn==gamestateRef.current.your_index ,\r\n        drop: (tile)=> addTile(tile),\r\n    })); \r\n    const dragOverstyle={\r\n        backgroundColor: isOver && \"grey\"\r\n    } \r\n    \r\n    const addTile=(tile_drag)=>{\r\n        let drag_block;\r\n        let drag_container;\r\n        let drop_block=boardstateRef.current.blocks[values.block.index];\r\n        let update_just_added=gamestateRef.current.just_added;\r\n        if (tile_drag.container_index || tile_drag.container_index==0){\r\n            let tile=playerlistRef.current[gamestateRef.current.your_index].tiles[tile_drag.container_index]\r\n            if(tile.alphabet==\" \"){\r\n                \r\n                let wrong_input=true;\r\n                while(wrong_input){\r\n                    let alphabet=window.prompt(\"Please enter your desired alphabet\");\r\n                    if (alphabet.length == 1 && alphabet.toLowerCase() != alphabet.toUpperCase()){\r\n                        alphabet = alphabet.toUpperCase();\r\n                        tile.alphabet=alphabet\r\n                        wrong_input = false;\r\n                    }\r\n                }\r\n            }  \r\n            tile.placed=true\r\n            tile.just_added=true\r\n            tile.container_index=undefined\r\n            tile.board_index=values.block.index\r\n            tile.canDrop=false\r\n\r\n            \r\n            drop_block.content=tile\r\n            drag_container=playerlistRef.current[gamestateRef.current.your_index].tiles\r\n            drag_container.splice(tile_drag.container_index,1)\r\n            for (let i=0;i<drag_container.length;i++){drag_container[i].container_index=i}\r\n\r\n           update_just_added.push(values.block.index)\r\n            values.container_board(drag_container,drop_block,update_just_added)\r\n        }else{\r\n            \r\n            drag_block=boardstateRef.current.blocks[tile_drag.board_index]\r\n            let tile=drag_block.content\r\n\r\n            tile.container_index=undefined\r\n            tile.board_index=values.block.index\r\n            drop_block.content=tile\r\n            drag_block.content=null\r\n\r\n            let initial_index=update_just_added.indexOf(drag_block.index)\r\n\r\n            update_just_added.splice(initial_index,1)\r\n            update_just_added.push(drop_block.index)\r\n\r\n            values.board_board(drag_block,drop_block,update_just_added)\r\n        }\r\n        websocket.current.emit(\"emit_drop_block\",{\r\n            room_id:gamestateRef.current.room_id,\r\n            drag_container:(tile_drag.container_index==0 || tile_drag.container_index)? drag_container : tile_drag.container_index,\r\n            drag_block:(tile_drag.board_index==0 || tile_drag.board_index) ? drag_block : tile_drag.board_index,\r\n            drop_block:drop_block,\r\n            just_added:update_just_added,\r\n        })\r\n        \r\n    }\r\n    \r\n    \r\n    return(\r\n        <div className={block_type[values.block.type].className} ref={drop} style={dragOverstyle}>\r\n            {values.block.content &&  <Tile tile={values.block.content}/>}\r\n            {block_type[values.block.type].innerHTML}\r\n        </div>)   \r\n    \r\n}\r\n\r\n\r\n\r\nclass Blocks{\r\n    constructor(){\r\n        this.blocks=[]\r\n        this.row_length = 15;\r\n        this.column_length = 15;\r\n        this.tw_coordinate=['14,14','7,14','0,14','14,7','0,7','14,0','7,0','0,0']\r\n        this.dw_coordinate=[,'13,13','1,13','12,12','2,12','11,11','3,11','10,10',\r\n                '4,10','10,4','4,4','11,3','3,3','12,2','2,2','13,1','1,1']\r\n\r\n        this.dl_coordinate=['11,14', '3,14', '8,12', '6,12', '14,11', '7,11', '0,11', \r\n                '12,8', '8,8', '6,8', '2,8', '11,7', '3,7', '12,6', '8,6', '6,6', \r\n                '2,6', '14,3', '7,3', '0,3', '8,2', '6,2', '11,0', '3,0']\r\n\r\n\r\n        this.tl_coordinate=['9,13', '5,13', '13,9', '9,9', '5,9', '1,9', '13,5', '9,5',\r\n                  '5,5', '1,5', '9,1', '5,1']\r\n\r\n        this.st_coordinate=['7,7']\r\n        this.construct_blocks()\r\n    }\r\n    construct_blocks(){\r\n        let pos=0\r\n        for (let y=0 ; y<this.row_length ; ++y){  \r\n\r\n            for (let x=0 ; x<this.column_length ; ++x){\r\n                \r\n                let temp_coord=x.toString() + \",\" + y.toString();    \r\n                switch(temp_coord){\r\n                    case this.tw_coordinate[this.tw_coordinate.length-1]:\r\n                        this.blocks.push({type:\"tw\",content:null,index:pos,})       \r\n                        this.tw_coordinate.pop();\r\n                        break;\r\n                    case this.dw_coordinate[this.dw_coordinate.length-1]:\r\n                        this.blocks.push({type:\"dw\",content:null,index:pos})   \r\n                        this.dw_coordinate.pop();\r\n                        break;\r\n                    case this.dl_coordinate[this.dl_coordinate.length-1]:\r\n                        this.blocks.push({type:\"dl\",content:null,index:pos})   \r\n                        this.dl_coordinate.pop();\r\n                        break;\r\n                    case this.tl_coordinate[this.tl_coordinate.length-1]:\r\n                        this.blocks.push({type:\"tl\",content:null,index:pos})   \r\n                        this.tl_coordinate.pop();\r\n                        break;\r\n                    case this.st_coordinate[this.st_coordinate.length-1]:\r\n                        this.blocks.push({type:\"st\",content:null,index:pos})   \r\n                        this.st_coordinate.pop();\r\n                        break;\r\n                    default:\r\n                        this.blocks.push({type:\"default\",content:null,index:pos})   \r\n                        break;\r\n                } \r\n                pos+=1\r\n            }\r\n        }\r\n        delete this.tw_coordinate\r\n        delete this.dw_coordinate\r\n        delete this.dl_coordinate\r\n        delete this.tl_coordinate\r\n        delete this.st_coordinate\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction Board(values) {\r\n    const websocket=useContext(SocketContext)\r\n    const {profile,setprofile}=useContext(UserContext)\r\n    const {gameState,setgameState}=useContext(GamesContext)\r\n    const {boardState,setboardState}=useContext(BlocksContext)\r\n    const {playerlistState,setplayerlistState}=useContext(PlayerListContext)\r\n    const socket2=useRef()\r\n    socket2.current=io.connect(\"http://localhost:5500\")\r\n    const playerlistRef=useRef(null);\r\n    const gamestateRef=useRef(null);\r\n    const boardstateRef=useRef(null);\r\n    playerlistRef.current=playerlistState\r\n    gamestateRef.current=gameState\r\n    boardstateRef.current=boardState\r\n\r\n    function container_board_state(drag_container,drop_block,just_added){\r\n      setboardState((prevblockstate=>{\r\n        let tempblockstate={...prevblockstate}\r\n        tempblockstate.blocks[drop_block.index]=drop_block\r\n        return tempblockstate\r\n        }))\r\n      setgameState(prevgamestate=>({\r\n          ...prevgamestate,\r\n          just_added:just_added,      \r\n      }))\r\n      setplayerlistState((prevplayerlist=>{\r\n          let temp_playerlist=[...prevplayerlist]\r\n          temp_playerlist[gamestateRef.current.player_turn].tiles=drag_container\r\n          return temp_playerlist\r\n      }))\r\n    }\r\n\r\n    function board_board_state(drag_block,drop_block,just_added){\r\n      setboardState((prevblockstate=>{\r\n        let tempblockstate={...prevblockstate}\r\n        tempblockstate.blocks[drag_block.index]=drag_block\r\n        tempblockstate.blocks[drop_block.index]=drop_block\r\n        return tempblockstate\r\n        }))\r\n      setgameState(prevgamestate=>({\r\n        ...prevgamestate,\r\n        just_added:just_added,      \r\n      }))\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        websocket.current.on(\"drop_tile_block\",(socket_out)=>{\r\n            \r\n          if(socket_out.drag_container){\r\n            container_board_state(socket_out.drag_container,socket_out.drop_block,socket_out.just_added)\r\n          }else{\r\n            console.log(\"DRAG_BLOCK\")\r\n            board_board_state(socket_out.drag_block,socket_out.drop_block,socket_out.just_added)\r\n          } \r\n        })\r\n      \r\n    },[])\r\n\r\n    return (\r\n    <div className=\"board_holder\">\r\n    <div className=\"board\">\r\n        {values.blocks_class.blocks.map((block,pos)=>(\r\n    <Block block={block} \r\n           container_board={container_board_state} \r\n           board_board={board_board_state} \r\n           key={pos}/>\r\n    ))}\r\n    </div>\r\n    </div>)\r\n     \r\n  }\r\n\r\nexport {Board,Blocks}"]},"metadata":{},"sourceType":"module"}