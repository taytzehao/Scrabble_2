{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Main_game\\\\Board.js\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst block_type = {\n  dw: {\n    className: \"bl dw\",\n    innerHTML: \"Double Word Score\"\n  },\n  tw: {\n    className: \"bl tw\",\n    innerHTML: \"Triple Word Score\"\n  },\n  dl: {\n    className: \"bl dl\",\n    innerHTML: \"Double Letter Score\"\n  },\n  tl: {\n    className: \"bl tl\",\n    innerHTML: \"Triple Letter Score\"\n  },\n  st: {\n    className: \"bl dw st\",\n    innerHTML: \"\"\n  },\n  default: {\n    className: \"bl default\",\n    innerHTML: \"\"\n  }\n};\n\nfunction Block(block_type) {\n  /*\r\n  const [tile_content,set_tile_content]=useState([])\r\n    const [{isOver},drop] = useDrop(()=>({\r\n      accept: \"active\",\r\n      drop: (tile)=> addTile(tile.id),\r\n  }));  \r\n    const addTile = (tile) =>{\r\n      if (!tile_content){\r\n          if(tile.querySelector(\"p\").innerHTML==\" \"){\r\n                let wrong_input=true;\r\n                  while(wrong_input){\r\n                  let alphabet=window.prompt(\"Please enter your desired alphabet\");\r\n                  if (alphabet.length == 1 && alphabet.toLowerCase() != alphabet.toUpperCase()){\r\n                      alphabet = alphabet.toUpperCase();\r\n                      tile.querySelector(\"p\").innerHTML=alphabet\r\n                      wrong_input = false;\r\n                  }\r\n              }\r\n          }\r\n          set_tile_content([tile])\r\n      }\r\n  }\r\n  \r\n  return(<div className={block_type.className} ref={drop}>\r\n      {tile_content && tile_content[0]}\r\n      {block_type.innerHTML}</div>)   */\n  console.log(block_type);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: block_type.className,\n    children: block_type.innerHTML\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Block;\nconst tw_coordinate = ['14,14', '7,14', '0,14', '14,7', '0,7', '14,0', '7,0', '0,0'];\nconst dw_coordinate = [, '13,13', '1,13', '12,12', '2,12', '11,11', '3,11', '10,10', '4,10', '10,4', '4,4', '11,3', '3,3', '12,2', '2,2', '13,1', '1,1'];\nconst dl_coordinate = ['11,14', '3,14', '8,12', '6,12', '14,11', '7,11', '0,11', '12,8', '8,8', '6,8', '2,8', '11,7', '3,7', '12,6', '8,6', '6,6', '2,6', '14,3', '7,3', '0,3', '8,2', '6,2', '11,0', '3,0'];\nconst tl_coordinate = ['9,13', '5,13', '13,9', '9,9', '5,9', '1,9', '13,5', '9,5', '5,5', '1,5', '9,1', '5,1'];\nconst st_coordinate = ['7,7'];\nconst blocks = [];\nlet row_length = 15;\nlet column_length = 15;\n\nfor (let y = 0; y < row_length; ++y) {\n  for (let x = 0; x < column_length; ++x) {\n    let temp_coord = x.toString() + \",\" + y.toString();\n\n    switch (temp_coord) {\n      case tw_coordinate[tw_coordinate.length - 1]:\n        blocks.push(\"tw\");\n        tw_coordinate.pop();\n        break;\n\n      case dw_coordinate[dw_coordinate.length - 1]:\n        blocks.push(\"dw\");\n        dw_coordinate.pop();\n        break;\n\n      case dl_coordinate[dl_coordinate.length - 1]:\n        blocks.push(\"dl\");\n        dl_coordinate.pop();\n        break;\n\n      case tl_coordinate[tl_coordinate.length - 1]:\n        blocks.push(\"tl\");\n        tl_coordinate.pop();\n        break;\n\n      case st_coordinate[st_coordinate.length - 1]:\n        blocks.push(\"st\");\n        st_coordinate.pop();\n        break;\n\n      default:\n        blocks.push(\"default\");\n        break;\n    }\n  }\n}\n\nfunction Board() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: blocks.map(tile => /*#__PURE__*/_jsxDEV(Block, {\n      value: block_type[tile]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Block\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Main_game/Board.js"],"names":["React","useState","useContext","useEffect","useRef","useDrop","block_type","dw","className","innerHTML","tw","dl","tl","st","default","Block","console","log","tw_coordinate","dw_coordinate","dl_coordinate","tl_coordinate","st_coordinate","blocks","row_length","column_length","y","x","temp_coord","toString","length","push","pop","Board","map","tile"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect,useRef} from 'react';\r\nimport {useDrop} from 'react-dnd'\r\n\r\nconst block_type = {\r\n  dw:{className:\"bl dw\",innerHTML:\"Double Word Score\"},\r\n  tw:{className:\"bl tw\",innerHTML:\"Triple Word Score\"},\r\n  dl:{className:\"bl dl\",innerHTML:\"Double Letter Score\"},\r\n  tl:{className:\"bl tl\",innerHTML:\"Triple Letter Score\"},\r\n  st:{className:\"bl dw st\",innerHTML:\"\"},\r\n  default:{className:\"bl default\",innerHTML:\"\"},\r\n};\r\n\r\nfunction Block(block_type){ \r\n    /*\r\n    const [tile_content,set_tile_content]=useState([])\r\n\r\n    const [{isOver},drop] = useDrop(()=>({\r\n        accept: \"active\",\r\n        drop: (tile)=> addTile(tile.id),\r\n    }));  \r\n\r\n    const addTile = (tile) =>{\r\n        if (!tile_content){\r\n            if(tile.querySelector(\"p\").innerHTML==\" \"){\r\n\r\n                let wrong_input=true;\r\n                    while(wrong_input){\r\n                    let alphabet=window.prompt(\"Please enter your desired alphabet\");\r\n                    if (alphabet.length == 1 && alphabet.toLowerCase() != alphabet.toUpperCase()){\r\n                        alphabet = alphabet.toUpperCase();\r\n                        tile.querySelector(\"p\").innerHTML=alphabet\r\n                        wrong_input = false;\r\n                    }\r\n                }\r\n            }\r\n            set_tile_content([tile])\r\n        }\r\n    }\r\n    \r\n    return(<div className={block_type.className} ref={drop}>\r\n        {tile_content && tile_content[0]}\r\n        {block_type.innerHTML}</div>)   */ \r\n    console.log(block_type)   \r\n    return(<div className={block_type.className}>\r\n        {block_type.innerHTML}</div>) \r\n}\r\n\r\nconst tw_coordinate=['14,14','7,14','0,14','14,7','0,7','14,0','7,0','0,0']\r\nconst dw_coordinate=[,'13,13','1,13','12,12','2,12','11,11','3,11','10,10',\r\n                '4,10','10,4','4,4','11,3','3,3','12,2','2,2','13,1','1,1']\r\n\r\nconst dl_coordinate=['11,14', '3,14', '8,12', '6,12', '14,11', '7,11', '0,11', \r\n                '12,8', '8,8', '6,8', '2,8', '11,7', '3,7', '12,6', '8,6', '6,6', \r\n                '2,6', '14,3', '7,3', '0,3', '8,2', '6,2', '11,0', '3,0']\r\n\r\n\r\nconst tl_coordinate=['9,13', '5,13', '13,9', '9,9', '5,9', '1,9', '13,5', '9,5',\r\n                  '5,5', '1,5', '9,1', '5,1']\r\n\r\nconst st_coordinate=['7,7']\r\n\r\nconst blocks=[]\r\n\r\nlet row_length = 15;\r\nlet column_length = 15;\r\n\r\n\r\nfor (let y=0 ; y<row_length ; ++y){  \r\n\r\n    for (let x=0 ; x<column_length ; ++x){\r\n        \r\n        let temp_coord=x.toString() + \",\" + y.toString();    \r\n      \r\n        switch(temp_coord){\r\n            case tw_coordinate[tw_coordinate.length-1]:\r\n                blocks.push(\"tw\");\r\n                tw_coordinate.pop();\r\n                break;\r\n            case dw_coordinate[dw_coordinate.length-1]:\r\n                blocks.push(\"dw\");\r\n                dw_coordinate.pop();\r\n                break;\r\n            case dl_coordinate[dl_coordinate.length-1]:\r\n                blocks.push(\"dl\")\r\n                dl_coordinate.pop();\r\n                break;\r\n            case tl_coordinate[tl_coordinate.length-1]:\r\n                blocks.push(\"tl\");\r\n                tl_coordinate.pop();\r\n                break;\r\n            case st_coordinate[st_coordinate.length-1]:\r\n                blocks.push(\"st\");\r\n                st_coordinate.pop();\r\n                break;\r\n            default:\r\n                blocks.push(\"default\")\r\n                break;\r\n        }  \r\n    }\r\n}\r\n\r\nfunction Board() {\r\n        \r\n      return (\r\n        <div className=\"board\">\r\n          {blocks.map((tile)=>(\r\n        <Block value={block_type[tile]} />\r\n        ))}\r\n        </div>)\r\n     \r\n  }\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}