{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Action\\\\Actionbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { UserContext } from '../../UserContext.js';\nimport { GamesContext, BlocksContext, PlayerListContext } from '../GamesContext.js';\nimport Draw_button from \"./Draw_button.js\";\nimport Score_button from \"./Score_button.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Action_bar() {\n  _s();\n\n  const {\n    playerlistState,\n    setplayerlistState\n  } = useContext(PlayerListContext);\n  const {\n    gameState,\n    setgameState\n  } = useContext(GamesContext);\n  const playerlistRef = useRef(null);\n  const gamestateRef = useRef(null);\n  const boardstateRef = useRef(null);\n  playerlistRef.current = playerlistState;\n  gamestateRef.current = gameState;\n  boardstateRef.current = boardState;\n\n  function next_turn() {\n    setboardState(prevboardState => {\n      let tempboardState = [...prevboardState];\n      gamestateRef.current.just_added.forEach(index => {\n        tempboardState.blocks[index].content.just_added = false;\n        tempboardState.blocks[index].content.challenge = true;\n        tempboardState.blocks[index].content.active = false, tempboardState.blocks[index].content.canDrag = false, tempboardState.blocks[index].content.canDrop = false, tempboardState.blocks[index].content.index = null;\n      });\n      return tempboardState;\n    });\n    setanalyticsdataState(prevanalyticsdata => {\n      let newanalyticsdata = [...prevanalyticsdata];\n\n      for (let index of gamestateRef.current.just_added) {\n        let analytics_index = newanalyticsdata.findIndex(data => data.alphabet == boardstateRef.current.blocks[index].content.alphabet)(newanalyticsdata[analytics_index].num == 1) ? newanalyticsdata.splice(analytics_index, 1) : newanalyticsdata[analytics_index].num -= 1;\n      }\n\n      return newanalyticsdata;\n    });\n    setgameState(prevgameState => ({ ...prevgameState,\n      turn_num: prevgameState.turn_num + 1,\n      just_added: []\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Action_bar\",\n    children: [/*#__PURE__*/_jsxDEV(Score_button, {\n      next_funct: next_turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Draw_button, {\n      next_funct: next_turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Action_bar, \"T5YacaST2Zi3fn9MvyWW6zBTNKg=\");\n\n_c = Action_bar;\nexport default Action_bar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Action_bar\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Action/Actionbar.js"],"names":["React","useState","useContext","useEffect","useRef","UserContext","GamesContext","BlocksContext","PlayerListContext","Draw_button","Score_button","Action_bar","playerlistState","setplayerlistState","gameState","setgameState","playerlistRef","gamestateRef","boardstateRef","current","boardState","next_turn","setboardState","prevboardState","tempboardState","just_added","forEach","index","blocks","content","challenge","active","canDrag","canDrop","setanalyticsdataState","prevanalyticsdata","newanalyticsdata","analytics_index","findIndex","data","alphabet","num","splice","prevgameState","turn_num"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect,useRef} from 'react';\r\nimport {UserContext} from '../../UserContext.js'\r\nimport {GamesContext,BlocksContext,PlayerListContext} from '../GamesContext.js'\r\nimport Draw_button from \"./Draw_button.js\";\r\nimport Score_button from \"./Score_button.js\";\r\n\r\nfunction Action_bar() {\r\n  const {playerlistState,setplayerlistState}=useContext(PlayerListContext)\r\n  const {gameState,setgameState}=useContext(GamesContext)   \r\n  const playerlistRef=useRef(null);\r\n  const gamestateRef=useRef(null);\r\n  const boardstateRef=useRef(null);\r\n  playerlistRef.current=playerlistState\r\n  gamestateRef.current=gameState\r\n  boardstateRef.current=boardState\r\n\r\n  function next_turn(){\r\n    setboardState((prevboardState=>{\r\n      let tempboardState=[...prevboardState]\r\n      gamestateRef.current.just_added.forEach(index=>{\r\n          tempboardState.blocks[index].content.just_added=false\r\n          tempboardState.blocks[index].content.challenge=true\r\n          tempboardState.blocks[index].content.active=false,\r\n          tempboardState.blocks[index].content.canDrag=false,\r\n          tempboardState.blocks[index].content.canDrop=false,\r\n          tempboardState.blocks[index].content.index=null\r\n      })\r\n      return tempboardState\r\n  }))\r\n    setanalyticsdataState((prevanalyticsdata=>{\r\n      let newanalyticsdata=[...prevanalyticsdata]\r\n      for (let index of gamestateRef.current.just_added){\r\n        let analytics_index=newanalyticsdata.findIndex(data=>data.alphabet==boardstateRef.current.blocks[index].content.alphabet)\r\n        (newanalyticsdata[analytics_index].num==1) ? newanalyticsdata.splice(analytics_index,1) : newanalyticsdata[analytics_index].num-=1\r\n      }\r\n      return newanalyticsdata\r\n  }))\r\n    setgameState((prevgameState=>({...prevgameState,\r\n      turn_num:prevgameState.turn_num+1, \r\n      just_added:[]     \r\n  }))) \r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"Action_bar\">\r\n      <Score_button next_funct={next_turn}/>\r\n      <Draw_button next_funct={next_turn}/>   \r\n    </div>)\r\n     \r\n  }\r\n\r\nexport default Action_bar;"]},"metadata":{},"sourceType":"module"}