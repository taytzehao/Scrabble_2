{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Main_game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useDrop } from 'react-dnd';\nimport './Board.css';\nimport { UserContext } from '../../UserContext.js';\nimport { GamesContext, PlayerListContext } from '../GamesContext.js';\nimport { Tile } from '../Sachet.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst block_type = {\n  dw: {\n    className: \"bl dw\",\n    innerHTML: \"Double Word Score\"\n  },\n  tw: {\n    className: \"bl tw\",\n    innerHTML: \"Triple Word Score\"\n  },\n  dl: {\n    className: \"bl dl\",\n    innerHTML: \"Double Letter Score\"\n  },\n  tl: {\n    className: \"bl tl\",\n    innerHTML: \"Triple Letter Score\"\n  },\n  st: {\n    className: \"bl dw st\",\n    innerHTML: \"\"\n  },\n  default: {\n    className: \"bl default\",\n    innerHTML: \"\"\n  }\n};\n\nfunction Block(values) {\n  _s();\n\n  const {\n    profile,\n    setprofile\n  } = useContext(UserContext);\n  const {\n    gameState,\n    setgameState\n  } = useContext(GamesContext);\n  const {\n    playerlistState,\n    setplayerlistState\n  } = useContext(PlayerListContext);\n  const [blockstate, setblockstate] = useState({\n    allowDrag: true\n  });\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: \"active\",\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    }),\n    //canDrop: ()=> !content && gameState.Player_list[player_num].username==profile.username ,\n    drop: tile => addTile(tile)\n  }));\n\n  const addTile = tile_drag => {\n    let tile = playerlistState[game];\n\n    if (tile.alphabet == \" \") {\n      let wrong_input = true;\n\n      while (wrong_input) {\n        let alphabet = window.prompt(\"Please enter your desired alphabet\");\n\n        if (alphabet.length == 1 && alphabet.toLowerCase() != alphabet.toUpperCase()) {\n          alphabet = alphabet.toUpperCase();\n          tile.querySelector(\"p\").innerHTML = alphabet;\n          wrong_input = false;\n        }\n      }\n    }\n\n    let tile_drag_data = gameState.Player_list[gameState.player_num].tiles.filter(tile => tile.id == tile_drag.id)[0];\n    tile_drag_data.placed = true;\n    tile_drag_data.just_added = true;\n    let temp_block = blockstate[values.block.index];\n    temp_block.content = tile_drag_data;\n    setblockstate(prevblockstate => ({ ...prevblockstate,\n      [values.block.index]: temp_block\n    }));\n    const remaining_tiles = gameState.Player_list[gameState.player_num].tiles.filter(tile => tile.id != tile_drag.id)[0];\n    setgameState(prevgamestate => {\n      let newgamestate = { ...prevgamestate\n      };\n      newgamestate.just_added = [...prevgamestate.just_added, values.block.index], newgamestate.Player_list[gameState.player_num].tiles = remaining_tiles;\n      return newgamestate;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: block_type[values.block.type].className,\n    ref: drop,\n    style: isOver ? backgroundColor : \"grey\",\n    children: [values.block.content && /*#__PURE__*/_jsxDEV(Tile, {\n      tile: values.block.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 39\n    }, this), block_type[values.block.type].innerHTML]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Block, \"vLISjf6TDX2+5G4QN4ZT/L+BRMo=\", false, function () {\n  return [useDrop];\n});\n\n_c = Block;\n\nclass Blocks {\n  constructor() {\n    this.blocks = [];\n    this.row_length = 15;\n    this.column_length = 15;\n    this.tw_coordinate = ['14,14', '7,14', '0,14', '14,7', '0,7', '14,0', '7,0', '0,0'];\n    this.dw_coordinate = [, '13,13', '1,13', '12,12', '2,12', '11,11', '3,11', '10,10', '4,10', '10,4', '4,4', '11,3', '3,3', '12,2', '2,2', '13,1', '1,1'];\n    this.dl_coordinate = ['11,14', '3,14', '8,12', '6,12', '14,11', '7,11', '0,11', '12,8', '8,8', '6,8', '2,8', '11,7', '3,7', '12,6', '8,6', '6,6', '2,6', '14,3', '7,3', '0,3', '8,2', '6,2', '11,0', '3,0'];\n    this.tl_coordinate = ['9,13', '5,13', '13,9', '9,9', '5,9', '1,9', '13,5', '9,5', '5,5', '1,5', '9,1', '5,1'];\n    this.st_coordinate = ['7,7'];\n    this.construct_blocks();\n  }\n\n  construct_blocks() {\n    let pos = 0;\n\n    for (let y = 0; y < this.row_length; ++y) {\n      for (let x = 0; x < this.column_length; ++x) {\n        let temp_coord = x.toString() + \",\" + y.toString();\n\n        switch (temp_coord) {\n          case tw_coordinate[tw_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"tw\",\n              content: null,\n              index: pos\n            });\n            tw_coordinate.pop();\n            break;\n\n          case dw_coordinate[dw_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"dw\",\n              content: null,\n              index: pos\n            });\n            dw_coordinate.pop();\n            break;\n\n          case dl_coordinate[dl_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"dl\",\n              content: null,\n              index: pos\n            });\n            dl_coordinate.pop();\n            break;\n\n          case tl_coordinate[tl_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"tl\",\n              content: null,\n              index: pos\n            });\n            tl_coordinate.pop();\n            break;\n\n          case st_coordinate[st_coordinate.length - 1]:\n            this.blocks.push({\n              type: \"st\",\n              content: null,\n              index: pos\n            });\n            st_coordinate.pop();\n            break;\n\n          default:\n            this.blocks.push({\n              type: \"default\",\n              content: null,\n              index: pos\n            });\n            break;\n        }\n\n        pos += 1;\n      }\n    }\n\n    delete this.tw_coordinate;\n    delete this.dw_coordinate;\n    delete this.dl_coordinate;\n    delete this.tl_coordinate;\n    delete this.st_coordinate;\n  }\n\n}\n\nfunction Board({\n  values\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board_holder\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: values.blocks.map((block, pos) => /*#__PURE__*/_jsxDEV(Block, {\n        block: block\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = Board;\nexport { Board, Blocks };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Block\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Main_game/Board.js"],"names":["React","useState","useContext","useEffect","useRef","useDrop","UserContext","GamesContext","PlayerListContext","Tile","block_type","dw","className","innerHTML","tw","dl","tl","st","default","Block","values","profile","setprofile","gameState","setgameState","playerlistState","setplayerlistState","blockstate","setblockstate","allowDrag","isOver","drop","accept","collect","monitor","tile","addTile","tile_drag","game","alphabet","wrong_input","window","prompt","length","toLowerCase","toUpperCase","querySelector","tile_drag_data","Player_list","player_num","tiles","filter","id","placed","just_added","temp_block","block","index","content","prevblockstate","remaining_tiles","prevgamestate","newgamestate","type","backgroundColor","Blocks","constructor","blocks","row_length","column_length","tw_coordinate","dw_coordinate","dl_coordinate","tl_coordinate","st_coordinate","construct_blocks","pos","y","x","temp_coord","toString","push","pop","Board","map"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect,useRef} from 'react';\r\nimport {useDrop} from 'react-dnd';\r\nimport './Board.css'\r\nimport {UserContext} from '../../UserContext.js'\r\nimport {GamesContext,PlayerListContext} from '../GamesContext.js';\r\nimport {Tile} from '../Sachet.js'\r\n\r\nconst block_type = {\r\n  dw:{className:\"bl dw\",innerHTML:\"Double Word Score\"},\r\n  tw:{className:\"bl tw\",innerHTML:\"Triple Word Score\"},\r\n  dl:{className:\"bl dl\",innerHTML:\"Double Letter Score\"},\r\n  tl:{className:\"bl tl\",innerHTML:\"Triple Letter Score\"},\r\n  st:{className:\"bl dw st\",innerHTML:\"\"},\r\n  default:{className:\"bl default\",innerHTML:\"\"},\r\n};\r\n\r\nfunction Block(values){ \r\n    const {profile,setprofile}=useContext(UserContext)\r\n    const {gameState,setgameState}=useContext(GamesContext)\r\n    const {playerlistState,setplayerlistState}=useContext(PlayerListContext)\r\n    const [blockstate,setblockstate]=useState({\r\n        allowDrag:true\r\n    })\r\n\r\n    const [{isOver},drop] = useDrop(()=>({\r\n        accept: \"active\",\r\n        collect:monitor=>({\r\n            isOver:!!monitor.isOver(),\r\n        }),\r\n        //canDrop: ()=> !content && gameState.Player_list[player_num].username==profile.username ,\r\n        drop: (tile)=> addTile(tile),\r\n    }));  \r\n    \r\n    const addTile = (tile_drag) =>{\r\n        let tile=playerlistState[game]\r\n        if(tile.alphabet==\" \"){\r\n\r\n            let wrong_input=true;\r\n                while(wrong_input){\r\n                let alphabet=window.prompt(\"Please enter your desired alphabet\");\r\n                if (alphabet.length == 1 && alphabet.toLowerCase() != alphabet.toUpperCase()){\r\n                    alphabet = alphabet.toUpperCase();\r\n                    tile.querySelector(\"p\").innerHTML=alphabet\r\n                    wrong_input = false;\r\n                }\r\n            }\r\n        }\r\n        let tile_drag_data=gameState.Player_list[gameState.player_num].tiles.filter(tile=>tile.id==tile_drag.id)[0]\r\n        tile_drag_data.placed=true\r\n        tile_drag_data.just_added=true\r\n        let temp_block=blockstate[values.block.index]\r\n        temp_block.content=tile_drag_data\r\n        setblockstate(prevblockstate=>({...prevblockstate,\r\n            [values.block.index]:temp_block\r\n            }))\r\n        const remaining_tiles=gameState.Player_list[gameState.player_num].tiles.filter(tile=>tile.id!=tile_drag.id)[0] \r\n        setgameState((prevgamestate)=>{\r\n            let newgamestate={...prevgamestate};\r\n            newgamestate.just_added=[...prevgamestate.just_added,values.block.index],\r\n            newgamestate.Player_list[gameState.player_num].tiles=remaining_tiles;\r\n            return newgamestate\r\n        })\r\n        \r\n    }\r\n    \r\n    return(\r\n        <div className={block_type[values.block.type].className} ref={drop} style={(isOver) ? backgroundColor: \"grey\" }>\r\n            {values.block.content &&  <Tile tile={values.block.content}/>}\r\n            {block_type[values.block.type].innerHTML}\r\n        </div>)   \r\n    \r\n}\r\n\r\n\r\n\r\nclass Blocks{\r\n    constructor(){\r\n        this.blocks=[]\r\n        this.row_length = 15;\r\n        this.column_length = 15;\r\n        this.tw_coordinate=['14,14','7,14','0,14','14,7','0,7','14,0','7,0','0,0']\r\n        this.dw_coordinate=[,'13,13','1,13','12,12','2,12','11,11','3,11','10,10',\r\n                '4,10','10,4','4,4','11,3','3,3','12,2','2,2','13,1','1,1']\r\n\r\n        this.dl_coordinate=['11,14', '3,14', '8,12', '6,12', '14,11', '7,11', '0,11', \r\n                '12,8', '8,8', '6,8', '2,8', '11,7', '3,7', '12,6', '8,6', '6,6', \r\n                '2,6', '14,3', '7,3', '0,3', '8,2', '6,2', '11,0', '3,0']\r\n\r\n\r\n        this.tl_coordinate=['9,13', '5,13', '13,9', '9,9', '5,9', '1,9', '13,5', '9,5',\r\n                  '5,5', '1,5', '9,1', '5,1']\r\n\r\n        this.st_coordinate=['7,7']\r\n        this.construct_blocks()\r\n    }\r\n    construct_blocks(){\r\n        let pos=0\r\n        for (let y=0 ; y<this.row_length ; ++y){  \r\n\r\n            for (let x=0 ; x<this.column_length ; ++x){\r\n                \r\n                let temp_coord=x.toString() + \",\" + y.toString();    \r\n                switch(temp_coord){\r\n                    case tw_coordinate[tw_coordinate.length-1]:\r\n                        this.blocks.push({type:\"tw\",content:null,index:pos,})       \r\n                        tw_coordinate.pop();\r\n                        break;\r\n                    case dw_coordinate[dw_coordinate.length-1]:\r\n                        this.blocks.push({type:\"dw\",content:null,index:pos})   \r\n                        dw_coordinate.pop();\r\n                        break;\r\n                    case dl_coordinate[dl_coordinate.length-1]:\r\n                        this.blocks.push({type:\"dl\",content:null,index:pos})   \r\n                        dl_coordinate.pop();\r\n                        break;\r\n                    case tl_coordinate[tl_coordinate.length-1]:\r\n                        this.blocks.push({type:\"tl\",content:null,index:pos})   \r\n                        tl_coordinate.pop();\r\n                        break;\r\n                    case st_coordinate[st_coordinate.length-1]:\r\n                        this.blocks.push({type:\"st\",content:null,index:pos})   \r\n                        st_coordinate.pop();\r\n                        break;\r\n                    default:\r\n                        this.blocks.push({type:\"default\",content:null,index:pos})   \r\n                        break;\r\n                } \r\n                pos+=1\r\n            }\r\n        }\r\n        delete this.tw_coordinate\r\n        delete this.dw_coordinate\r\n        delete this.dl_coordinate\r\n        delete this.tl_coordinate\r\n        delete this.st_coordinate\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction Board({values}) {\r\n        \r\n      return (\r\n        <div className=\"board_holder\">\r\n        <div className=\"board\">\r\n          {values.blocks.map((block,pos)=>(\r\n        <Block block={block}/>\r\n        ))}\r\n        </div>\r\n        </div>)\r\n     \r\n  }\r\n\r\nexport {Board,Blocks}"]},"metadata":{},"sourceType":"module"}