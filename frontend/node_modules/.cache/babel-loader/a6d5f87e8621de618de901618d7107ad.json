{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Sachet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef } from 'react';\nimport './Sachet.css';\nimport { Invisible_tile_context, GamesContext, PlayerListContext, BlocksContext } from './GamesContext.js';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { games_sachet } from './Gamespage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst alphabet_data = [[\"A\", 9, 1], [\"B\", 2, 3], [\"C\", 2, 3], [\"D\", 4, 2], [\"E\", 12, 1], [\"F\", 2, 4], [\"G\", 3, 2], [\"H\", 2, 4], [\"I\", 9, 1], [\"J\", 1, 8], [\"K\", 1, 5], [\"L\", 4, 1], [\"M\", 2, 3], [\"N\", 6, 1], [\"O\", 8, 1], [\"P\", 2, 3], [\"Q\", 1, 10], [\"R\", 6, 1], [\"S\", 4, 1], [\"T\", 6, 1], [\"U\", 4, 1], [\"V\", 2, 4], [\"W\", 2, 4], [\"X\", 1, 8], [\"Y\", 2, 4], [\"Z\", 1, 10], [\" \", 2, 0]];\n\nfunction Tile(values) {\n  _s();\n\n  const {\n    tile_visibility,\n    set_tile_visibility\n  } = useContext(Invisible_tile_context);\n  const {\n    playerlistState,\n    setplayerlistState\n  } = useContext(PlayerListContext);\n  const {\n    gameState,\n    setgameState\n  } = useContext(GamesContext);\n  const {\n    boardState,\n    setboardState\n  } = useContext(BlocksContext);\n  useContext();\n  const playerlistRef = useRef(null);\n  const gamestateRef = useRef(null);\n  const boardstateRef = useRef(null);\n  playerlistRef.current = playerlistState;\n  gamestateRef.current = gameState;\n  boardstateRef.current = boardState;\n  playerlistRef.current = playerlistState;\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: values.tile.active ? \"active\" : \"inactive\",\n    item: {\n      type: values.tile.active ? \"active\" : \"inactive\",\n      id: values.tile.id,\n      container_index: values.tile.container_index,\n      board_index: values.tile.board_index\n    },\n    canDrag: () => values.tile.canDrag,\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  const [, drop] = useDrop({\n    accept: [\"active\", \"inactive\"],\n    canDrop: () => values.tile.canDrop,\n\n    drop(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current) {\n        return;\n      }\n\n      let dragIndex;\n      let hoverIndex = values.tile.container_index;\n      let drop_container = playerlistRef.current[gamestateRef.current.your_index].tiles;\n      let drag_container;\n      let drag_block;\n      let update_just_added;\n      let drag_coordinate;\n      let hover_coordinate;\n      let drag_tile;\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n\n      if (values.orientation == \"horizontal\") {\n        drag_coordinate = clientOffset.x;\n        hover_coordinate = hoverBoundingRect.left + hoverBoundingRect.width / 2;\n      } else {\n        drag_coordinate = clientOffset.y;\n        hover_coordinate = hoverBoundingRect.top - hoverBoundingRect.height / 2;\n      }\n\n      if (item.container_index) {\n        let hoverTile = playerlistRef.current[gamestateRef.your_index].tiles[hoverIndex];\n        drag_tile = playerlistRef.current[gamestateRef.your_index].tiles[item.container_index];\n        drop_container.splice(dragIndex, 1);\n        hoverIndex = drop_container.findIndex(tile => tile.id == hoverTile.id);\n\n        if (drag_coordinate < hover_coordinate) {\n          drop_container.splice(hoverIndex, 0, drag_tile);\n        } else {\n          drop_container.splice(hoverIndex + 1, 0, drag_tile);\n        }\n\n        for (let i = 0; i < drag_container.length; i++) {\n          drop_container[i].container_index = i;\n        }\n\n        setplayerlistState(prevplayerlist => {\n          let temp_playerlist = [...prevplayerlist];\n          temp_playerlist[gamestateRef.current.your_index].tiles = drop_container;\n          return temp_playerlist;\n        });\n      } else {\n        drag_tile = boardstateRef.current.blocks[item.board_index].content(drag_tile.score == 0) ? drag_tile.content = \" \" : null;\n        drag_tile.canDrop = true;\n        drag_tile.placed = false;\n        drag_tile.just_added = false;\n        drag_tile.board_index = undefined;\n        drag_block = boardstateRef.current[item.board_index];\n        drag_block.content = null;\n\n        if (drag_coordinate < hover_coordinate) {\n          drop_container.splice(hoverIndex, 0, drag_tile);\n        } else {\n          drop_container.splice(hoverIndex + 1, 0, drag_tile);\n        }\n\n        for (let i = hoverIndex; i < drag_container.length; i++) {\n          drop_container[i].container_index = i;\n        }\n\n        update_just_added = gamestateRef.current.just_added.filter(index => index != item.board_index);\n        setboardState(prevblockstate => ({ ...prevblockstate,\n          [drag_block.index]: drag_block\n        }));\n        setplayerlistState(prevplayerlist => {\n          let temp_playerlist = [...prevplayerlist];\n          temp_playerlist[gamestateRef.current.your_index].tiles = drop_container;\n          return temp_playerlist;\n        });\n        setgameState(prevgamestate => ({ ...prevgamestate,\n          just_added: update_just_added\n        }));\n      }\n\n      gamestateRef.current.socket.emit(\"emit_drop_container\", {\n        room_id: gamestateRef.current.room_id,\n        player_index: gamestateRef.current.your_index,\n        drag_block: item.board_index ? drag_block : item.board_index,\n        drop_container: drop_container,\n        just_added: item.board_index ? update_just_added : item.board_index\n      });\n    }\n\n  });\n  let tile_name = \"game_tile\";\n\n  if (values.tile.placed) {\n    tile_name = tile_name + \" placed\";\n  }\n\n  const content_style = {\n    visibility: tile_visibility\n  };\n  const dragstyle = {\n    opacity: isDragging ? 0.5 : 1\n  };\n  drop(drag(ref));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tile_name,\n    ref: ref,\n    style: dragstyle,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: content_style,\n      children: values.tile.alphabet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: content_style,\n      children: values.tile.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tile, \"BHkk4WU06TeTieIcGW0oEQaVnp8=\", false, function () {\n  return [useDrag, useDrop];\n});\n\n_c = Tile;\nconst sachet = [];\nconst analytics_data = [];\nlet tile_id = 0;\n\nfor (let i = 0; i < alphabet_data.length; i++) {\n  for (let j = 0; j < alphabet_data[i][1]; j++) {\n    sachet.push({\n      alphabet: alphabet_data[i][0],\n      score: alphabet_data[i][2],\n      id: tile_id,\n      placed: false,\n      just_added: false,\n      challenge: false,\n      active: true,\n      canDrag: false,\n      canDrop: false,\n      container_index: undefined,\n      board_index: undefined\n    });\n    tile_id += 1;\n  }\n\n  analytics_data.push({\n    alphabet: alphabet_data[i][0],\n    num: alphabet_data[i][1]\n  });\n}\n\nexport { analytics_data, Tile };\nexport default sachet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Sachet.js"],"names":["React","useContext","useEffect","useRef","Invisible_tile_context","GamesContext","PlayerListContext","BlocksContext","useDrag","useDrop","games_sachet","alphabet_data","Tile","values","tile_visibility","set_tile_visibility","playerlistState","setplayerlistState","gameState","setgameState","boardState","setboardState","playerlistRef","gamestateRef","boardstateRef","current","ref","isDragging","drag","type","tile","active","item","id","container_index","board_index","canDrag","collect","monitor","drop","accept","canDrop","dragIndex","hoverIndex","drop_container","your_index","tiles","drag_container","drag_block","update_just_added","drag_coordinate","hover_coordinate","drag_tile","hoverBoundingRect","getBoundingClientRect","clientOffset","getClientOffset","orientation","x","left","width","y","top","height","hoverTile","splice","findIndex","i","length","prevplayerlist","temp_playerlist","blocks","content","score","placed","just_added","undefined","filter","index","prevblockstate","prevgamestate","socket","emit","room_id","player_index","tile_name","content_style","visibility","dragstyle","opacity","alphabet","sachet","analytics_data","tile_id","j","push","challenge","num"],"mappings":"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","sourcesContent":["import React,{useContext,useEffect,useRef} from 'react';\r\nimport './Sachet.css';\r\nimport {Invisible_tile_context,GamesContext,PlayerListContext,BlocksContext} from './GamesContext.js';\r\nimport {useDrag,useDrop} from 'react-dnd'\r\nimport { games_sachet } from './Gamespage';\r\n\r\n\r\nconst alphabet_data = [[\"A\",9,1],[\"B\",2,3],[\"C\",2,3],[\"D\",4,2],[\"E\",12,1],[\"F\",2,4],[\"G\",3,2],\r\n                        [\"H\",2,4],[\"I\",9,1],[\"J\",1,8],[\"K\",1,5],[\"L\",4,1],[\"M\",2,3],[\"N\",6,1],\r\n                        [\"O\",8,1],[\"P\",2,3],[\"Q\",1,10],[\"R\",6,1],[\"S\",4,1],[\"T\",6,1],[\"U\",4,1],\r\n                        [\"V\",2,4],[\"W\",2,4],[\"X\",1,8],[\"Y\",2,4],[\"Z\",1,10],[\" \",2,0]]\r\n\r\nfunction Tile (values){\r\n    const {tile_visibility,set_tile_visibility}=useContext(Invisible_tile_context)\r\n    const {playerlistState,setplayerlistState}=useContext(PlayerListContext)\r\n    const {gameState,setgameState}=useContext(GamesContext)   \r\n    const {boardState,setboardState}=useContext(BlocksContext)\r\n    useContext()\r\n    const playerlistRef=useRef(null);\r\n    const gamestateRef=useRef(null);\r\n    const boardstateRef=useRef(null);\r\n    playerlistRef.current=playerlistState\r\n    gamestateRef.current=gameState\r\n    boardstateRef.current=boardState\r\n\r\n    playerlistRef.current=playerlistState\r\n\r\n\r\n    const ref = useRef(null)\r\n   \r\n    const [{isDragging},drag]=useDrag({\r\n        type: (values.tile.active) ? \"active\":\"inactive\",\r\n        item:{\r\n            type:(values.tile.active) ? \"active\":\"inactive\",\r\n            id:values.tile.id,\r\n            container_index: values.tile.container_index,\r\n            board_index: values.tile.board_index\r\n        },\r\n        canDrag:()=>values.tile.canDrag,\r\n        collect: monitor => ({\r\n            isDragging: !! monitor.isDragging()\r\n        })\r\n    })\r\n    \r\n    const [,drop]=useDrop({\r\n        accept: [\"active\",\"inactive\"],\r\n        canDrop:()=>values.tile.canDrop,\r\n        drop(item, monitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            let dragIndex;\r\n            let hoverIndex = values.tile.container_index;\r\n\r\n            let drop_container=playerlistRef.current[gamestateRef.current.your_index].tiles;\r\n            let drag_container;\r\n            let drag_block;\r\n            let update_just_added;\r\n\r\n            let drag_coordinate;\r\n            let hover_coordinate;\r\n            let drag_tile;\r\n\r\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();            \r\n            const clientOffset = monitor.getClientOffset();\r\n\r\n            if(values.orientation==\"horizontal\"){\r\n                drag_coordinate=clientOffset.x;\r\n                hover_coordinate=hoverBoundingRect.left+hoverBoundingRect.width/2\r\n            }else{\r\n                drag_coordinate=clientOffset.y;\r\n                hover_coordinate=hoverBoundingRect.top-hoverBoundingRect.height/2\r\n            }\r\n\r\n            if(item.container_index){\r\n                let hoverTile=playerlistRef.current[gamestateRef.your_index].tiles[hoverIndex]\r\n                drag_tile=playerlistRef.current[gamestateRef.your_index].tiles[item.container_index]\r\n                \r\n                drop_container.splice(dragIndex,1)\r\n                hoverIndex=drop_container.findIndex(tile=>tile.id==hoverTile.id)\r\n                if(drag_coordinate<hover_coordinate){\r\n                    drop_container.splice(hoverIndex,0,drag_tile)\r\n                }else{\r\n                    drop_container.splice(hoverIndex+1,0,drag_tile)\r\n                }\r\n\r\n                for (let i=0;i<drag_container.length;i++){drop_container[i].container_index=i}\r\n                \r\n                setplayerlistState((prevplayerlist=>{\r\n                    let temp_playerlist=[...prevplayerlist]\r\n                    temp_playerlist[gamestateRef.current.your_index].tiles=drop_container\r\n                    return temp_playerlist\r\n                }))\r\n            }else{\r\n                drag_tile=boardstateRef.current.blocks[item.board_index].content\r\n                (drag_tile.score==0) ? drag_tile.content=\" \" : null;\r\n                drag_tile.canDrop=true;\r\n                drag_tile.placed=false\r\n                drag_tile.just_added=false;\r\n                drag_tile.board_index=undefined;\r\n\r\n                drag_block=boardstateRef.current[item.board_index]\r\n                drag_block.content=null\r\n\r\n                if(drag_coordinate<hover_coordinate){\r\n                    drop_container.splice(hoverIndex,0,drag_tile)\r\n                }else{\r\n                    drop_container.splice(hoverIndex+1,0,drag_tile)\r\n                }\r\n                for (let i=hoverIndex;i<drag_container.length;i++){drop_container[i].container_index=i}\r\n                update_just_added=gamestateRef.current.just_added.filter(index=>index!=item.board_index)\r\n                setboardState(prevblockstate=>({...prevblockstate,\r\n                    [drag_block.index]:drag_block\r\n                    }))\r\n\r\n                setplayerlistState((prevplayerlist=>{\r\n                    let temp_playerlist=[...prevplayerlist]\r\n                    temp_playerlist[gamestateRef.current.your_index].tiles=drop_container\r\n                    return temp_playerlist\r\n                }))\r\n                setgameState(prevgamestate=>({\r\n                    ...prevgamestate,\r\n                    just_added:update_just_added     \r\n                  }))\r\n            }\r\n            gamestateRef.current.socket.emit(\"emit_drop_container\",{\r\n                room_id:gamestateRef.current.room_id,\r\n                player_index:gamestateRef.current.your_index,\r\n                drag_block:(item.board_index) ? drag_block : item.board_index,\r\n                drop_container:drop_container,\r\n                just_added:(item.board_index) ? update_just_added: item.board_index\r\n            })\r\n        },\r\n    })\r\n    \r\n    let tile_name=\"game_tile\"\r\n    if(values.tile.placed){tile_name = tile_name + \" placed\"}\r\n    const content_style={visibility:tile_visibility}\r\n    const dragstyle={opacity:(isDragging) ? 0.5 : 1}\r\n    drop(drag(ref))\r\n    return(\r\n        <div className={tile_name} ref={ref} style={dragstyle}>\r\n        <p style={content_style}>{values.tile.alphabet}</p>\r\n        <p style={content_style}>{values.tile.score}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst sachet = []\r\nconst analytics_data = []\r\nlet tile_id=0\r\nfor (let i=0;i<alphabet_data.length;i++){\r\n    for (let j=0;j<alphabet_data[i][1];j++){\r\n        sachet.push({\r\n            alphabet:alphabet_data[i][0],\r\n            score:alphabet_data[i][2],\r\n            id:tile_id,\r\n            placed:false,\r\n            just_added:false,\r\n            challenge:false,\r\n            active:true,\r\n            canDrag:false,\r\n            canDrop:false,\r\n            container_index:undefined,\r\n            board_index:undefined\r\n        }) \r\n        tile_id+=1 \r\n    } \r\n    analytics_data.push({alphabet:alphabet_data[i][0],num:alphabet_data[i][1]})\r\n}\r\nexport {analytics_data,Tile}\r\n\r\nexport default sachet;\r\n\r\n"]},"metadata":{},"sourceType":"module"}