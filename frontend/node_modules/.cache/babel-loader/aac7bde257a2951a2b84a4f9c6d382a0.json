{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Joingame.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { UserContext } from '../UserContext.js';\nimport io from 'socket.io-client';\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction usePrevious(value) {\n  _s();\n\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    console.log(value);\n\n    if (value == []) {\n      console.log(\"alalala\");\n      ref.current = [];\n    } else {\n      ref.current = value;\n    }\n\n    ;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nfunction Joingame() {\n  _s2();\n\n  const {\n    profile,\n    setprofile\n  } = useContext(UserContext);\n  const [other_player, set_other_player] = useState([]);\n  const socketRef = useRef();\n  const prev_other_player = usePrevious(other_player);\n  useEffect(() => {\n    socketRef.current = io.connect(\"http://localhost:5500\");\n    socketRef.current.emit(\"emit_join_game\", profile.username);\n    socketRef.current.on(\"join_game\", username => {\n      set_other_player(oldArray => [...oldArray, username + \" has joined the game\"]);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(\"##########\", prev_other_player);\n\n    if (other_player.length > prev_other_player.length) {\n      setTimeout(() => {\n        set_other_player(prevActions => // Filter out the item with the matching index\n        prevActions.filter((value, i) => i !== 0));\n      }, 3000);\n    }\n  }, [other_player]);\n\n  if (other_player) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: other_player.map(Sentence => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: Sentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 45\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this);\n  } else {\n    return null;\n  }\n}\n\n_s2(Joingame, \"b3a4/g5RkrUNakOAR4lU5tyrQ+g=\", false, function () {\n  return [usePrevious];\n});\n\n_c = Joingame;\nexport default Joingame;\n\nvar _c;\n\n$RefreshReg$(_c, \"Joingame\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Joingame.js"],"names":["UserContext","io","React","useState","useContext","useEffect","useRef","usePrevious","value","ref","console","log","current","Joingame","profile","setprofile","other_player","set_other_player","socketRef","prev_other_player","connect","emit","username","on","oldArray","length","setTimeout","prevActions","filter","i","map","Sentence"],"mappings":";;;;AAAA,SAAQA,WAAR,QAA0B,mBAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAwBC,UAAxB,EAAmCC,SAAnC,EAA6CC,MAA7C,QAA0D,OAA1D;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB;AACA;AACA,QAAMC,GAAG,GAAGH,MAAM,EAAlB,CAHwB,CAKxB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,QAAGA,KAAK,IAAE,EAAV,EAAc;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACFF,MAAAA,GAAG,CAACG,OAAJ,GAAY,EAAZ;AAAe,KAFf,MAGI;AAACH,MAAAA,GAAG,CAACG,OAAJ,GAAcJ,KAAd;AAAoB;;AAAA;AAC1B,GANQ,EAMN,CAACA,KAAD,CANM,CAAT,CANwB,CAYX;AAEb;;AACA,SAAOC,GAAG,CAACG,OAAX;AACD;;GAhBML,W;;AAkBT,SAASM,QAAT,GAAoB;AAAA;;AAChB,QAAM;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAqBX,UAAU,CAACJ,WAAD,CAArC;AACA,QAAM,CAACgB,YAAD,EAAcC,gBAAd,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMe,SAAS,GAAEZ,MAAM,EAAvB;AACA,QAAMa,iBAAiB,GAAGZ,WAAW,CAACS,YAAD,CAArC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,SAAS,CAACN,OAAV,GAAkBX,EAAE,CAACmB,OAAH,CAAW,uBAAX,CAAlB;AACAF,IAAAA,SAAS,CAACN,OAAV,CAAkBS,IAAlB,CAAuB,gBAAvB,EAAwCP,OAAO,CAACQ,QAAhD;AACAJ,IAAAA,SAAS,CAACN,OAAV,CAAkBW,EAAlB,CAAqB,WAArB,EAAkCD,QAAQ,IAAE;AAACL,MAAAA,gBAAgB,CAACO,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAaF,QAAQ,GAAG,sBAAxB,CAAb,CAAhB;AAA8E,KAA3H;AACH,GAJQ,EAIP,EAJO,CAAT;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBQ,iBAAzB;;AACA,QAAIH,YAAY,CAACS,MAAb,GAAsBN,iBAAiB,CAACM,MAA5C,EAAoD;AAClDC,MAAAA,UAAU,CAAC,MAAM;AACfT,QAAAA,gBAAgB,CAACU,WAAW,IAC1B;AACAA,QAAAA,WAAW,CAACC,MAAZ,CAAmB,CAACpB,KAAD,EAAQqB,CAAR,KAAcA,CAAC,KAAK,CAAvC,CAFc,CAAhB;AAGD,OAJS,EAIP,IAJO,CAAV;AAKD;AACF,GATM,EASJ,CAACb,YAAD,CATI,CAAT;;AAWA,MAAGA,YAAH,EAAgB;AACd,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACOA,YAAY,CAACc,GAAb,CAAkBC,QAAD,iBAAY;AAAA,kBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,cAA7B;AADP;AAAA;AAAA;AAAA;AAAA,YADF;AAIE,GALJ,MAKQ;AAAC,WAAO,IAAP;AAAa;AACvB;;IA7BMlB,Q;UAIqBN,W;;;KAJrBM,Q;AA+BT,eAAeA,QAAf","sourcesContent":["import {UserContext} from '../UserContext.js'\r\nimport io from 'socket.io-client'\r\nimport React, {useState,useContext,useEffect,useRef} from 'react';\r\n\r\nfunction usePrevious(value) {\r\n    // The ref object is a generic container whose current property is mutable ...\r\n    // ... and can hold any value, similar to an instance property on a class\r\n    const ref = useRef();\r\n  \r\n    // Store current value in ref\r\n    useEffect(() => {\r\n      console.log(value)\r\n      if(value==[]) { \r\n        console.log(\"alalala\")\r\n      ref.current=[]}\r\n      else{ref.current = value};\r\n    }, [value]); // Only re-run if value changes\r\n    \r\n    // Return previous value (happens before update in useEffect above)\r\n    return ref.current;\r\n  }\r\n\r\nfunction Joingame() {\r\n    const {profile,setprofile}=useContext(UserContext)\r\n    const [other_player,set_other_player] = useState([])\r\n    const socketRef =useRef()\r\n    const prev_other_player = usePrevious(other_player);\r\n\r\n    useEffect(() => {\r\n        socketRef.current=io.connect(\"http://localhost:5500\")\r\n        socketRef.current.emit(\"emit_join_game\",profile.username)\r\n        socketRef.current.on(\"join_game\", username=>{set_other_player(oldArray => [...oldArray,username + \" has joined the game\"])})\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n        console.log(\"##########\",prev_other_player)\r\n        if (other_player.length > prev_other_player.length) {\r\n          setTimeout(() => {\r\n            set_other_player(prevActions => (\r\n              // Filter out the item with the matching index\r\n              prevActions.filter((value, i) => i !== 0)))\r\n          }, 3000);\r\n        }\r\n      }, [other_player]);\r\n    \r\n    if(other_player){\r\n      return (\r\n        <div className=\"main\">\r\n              {other_player.map((Sentence)=><span>{Sentence}</span>)}              \r\n        </div>\r\n      )}else{return(null)}\r\n  }\r\n\r\nexport default Joingame;"]},"metadata":{},"sourceType":"module"}