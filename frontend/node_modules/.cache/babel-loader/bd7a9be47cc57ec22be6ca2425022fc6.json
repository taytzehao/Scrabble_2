{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Main_game\\\\Tile_container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useDrag } from 'react-dnd';\nimport './Tile_container.css';\nimport { DndProvider, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { UserContext } from '../../UserContext.js';\nimport { GamesContext, PlayerListContext } from '../GamesContext.js';\nimport { Tile } from '../Sachet.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst positions = [[2, 1, \"row\", \"horizontal\"], [1, 2, \"column\", \"vertical\"], [2, 3, \"row\", \"horizontal\"], [3, 2, \"column\", \"vertical\"]];\n\nfunction Tile_container(value) {\n  _s();\n\n  const {\n    profile,\n    setprofile\n  } = useContext(UserContext);\n  const {\n    gameState,\n    setgameState\n  } = useContext(GamesContext);\n  const {\n    playerlistState,\n    setplayerlistState\n  } = useContext(PlayerListContext);\n  const {\n    boardState,\n    setboardState\n  } = useContext(BlocksContext);\n  const playerlistRef = useRef(null);\n  const gamestateRef = useRef(null);\n  const boardstateRef = useRef(null);\n  playerlistRef.current = playerlistState;\n  gamestateRef.current = gameState;\n  boardstateRef.current = boardState;\n  const container_name = \"tile_container \" + positions[value.player_num][3];\n  const containerstyle = {\n    gridColumn: positions[value.player_num][0],\n    gridRow: positions[value.player_num][1]\n  };\n  const holderstyle = {\n    display: \"flex\",\n    flexDirection: positions[value.player_num][2]\n  };\n  useEffect(() => {\n    let your_index_challenge = gameState.your_index == playerlistState.length - 1 ? 0 : gameState.your_index + 1;\n    let temp_playerlist = [...playerlistState];\n\n    if (gameState.player_turn == gameState.your_index) {\n      temp_playerlist[gameState.your_index].delete_active = true;\n      temp_playerlist[gameState.your_index].tiles.forEach(tile => {\n        tile.active = true;\n      });\n      setplayerlistState(temp_playerlist);\n    } else {\n      temp_playerlist[gameState.your_index].tiles.forEach(tile => {\n        tile.active = false;\n      });\n      setplayerlistState(temp_playerlist);\n    }\n\n    if (gameState.player_turn != your_index_challenge) {\n      temp_playerlist[gameState.your_index].challenge_active = true;\n      setplayerlistState(temp_playerlist);\n    } else {\n      temp_playerlist[gameState.your_index].challenge_active = false;\n      setplayerlistState(temp_playerlist);\n    }\n  }, [gameState.player_turn]);\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: \"active\",\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    }),\n    canDrop: playerlistRef[gamestateRef.current.your_index].active,\n    drop: tile => addDelete(tile)\n  }));\n\n  function container_delete_state() {}\n\n  function board_delete_state(board_index, drag_block, delete_tile) {\n    setboardState(prevboardState => {\n      let newboardState = [...prevboardState];\n      newboardState.blocks[board_index] = drag_block;\n      return newboardState;\n    });\n    setplayerlistState(prevplayerlistState => {\n      let newplayerlistState = [...prevplayerlistState];\n      newplayerlistState[gamestateRef.current.player_turn].delete_list.push(delete_tile);\n      return newplayerlistState;\n    });\n  }\n\n  function addDelete(drop_tile) {\n    let drag_block;\n    let drag_container;\n    let delete_tile;\n\n    if (drop_tile.board_index) {\n      delete_tile = boardstateRef.current.blocks[drop_tile.board_index].content;\n      delete_tile.container_index = undefined;\n      delete_tile.board_index = undefined;\n      drag_block = boardstateRef.current.blocks[drop_tile.board_index];\n      drag_block.content = null;\n      board_delete_state(board_index, drag_block, delete_tile);\n    } else {\n      delete_tile = prevplayerlistState[gamestateRef.current.player_turn].tiles[drop_tile.container_index];\n      drag_container = newplayerlistState.tiles.filter(tile => tile.id != drop_tile.id);\n\n      for (let i = 0; i < drag_container.length; i++) {\n        drag_container[i].container_index = i;\n      }\n    }\n\n    gamestateRef.current.socket.emit(\"emit_delete_tile\", {\n      room_id: gamestateRef.current.room_id,\n      player_turn: gamestateRef.current.player_turn,\n      drag_board: drop_tile.board_index ? drag_block : drop_tile.board_index,\n      drag_container: drop_tile.container_index ? drag_container : drop_tile.container_index,\n      tile: delete_tile\n    });\n  }\n\n  useEffect(() => {\n    gamestateRef.current.socket.on(\"delete_tile\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: container_name,\n    style: containerstyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name_display\",\n      children: playerlistState[value.player_num].username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score_display\",\n      children: playerlistState[value.player_num].score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile_holder\",\n      style: holderstyle,\n      children: playerlistState[value.player_num].tiles.map((tile, pos) => /*#__PURE__*/_jsxDEV(Tile, {\n        tile: tile,\n        orientation: positions[value.player_num][2]\n      }, pos, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      ref: drop,\n      className: \"challengebtn\",\n      visibility: playerlistState[value.player_num].challenge_active ? \"visible\" : \"hidden\",\n      children: \"Challenge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \".../UI_component/delete.png\",\n      className: \"delete_img\",\n      visibility: playerlistState[value.player_num].delete_active ? \"visible\" : \"hidden\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Tile_container, \"zebQ49sn/VkWhnqu/bf1mo+5rCo=\", false, function () {\n  return [useDrop];\n});\n\n_c = Tile_container;\nexport default Tile_container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile_container\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Main_game/Tile_container.js"],"names":["React","useContext","useState","useEffect","useDrag","DndProvider","useDrop","HTML5Backend","UserContext","GamesContext","PlayerListContext","Tile","positions","Tile_container","value","profile","setprofile","gameState","setgameState","playerlistState","setplayerlistState","boardState","setboardState","BlocksContext","playerlistRef","useRef","gamestateRef","boardstateRef","current","container_name","player_num","containerstyle","gridColumn","gridRow","holderstyle","display","flexDirection","your_index_challenge","your_index","length","temp_playerlist","player_turn","delete_active","tiles","forEach","tile","active","challenge_active","isOver","drop","accept","collect","monitor","canDrop","addDelete","container_delete_state","board_delete_state","board_index","drag_block","delete_tile","prevboardState","newboardState","blocks","prevplayerlistState","newplayerlistState","delete_list","push","drop_tile","drag_container","content","container_index","undefined","filter","id","i","socket","emit","room_id","drag_board","on","username","score","map","pos"],"mappings":"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","sourcesContent":["import React,{useContext,useState,useEffect} from 'react';\r\nimport {useDrag} from 'react-dnd';\r\nimport './Tile_container.css'\r\nimport {DndProvider,useDrop} from 'react-dnd'\r\nimport {HTML5Backend} from 'react-dnd-html5-backend'\r\nimport {UserContext} from '../../UserContext.js'\r\nimport {GamesContext,PlayerListContext} from '../GamesContext.js'\r\nimport {Tile} from '../Sachet.js'\r\n\r\nconst positions=[[2,1,\"row\",\"horizontal\"],[1,2,\"column\",\"vertical\"],[2,3,\"row\",\"horizontal\"],[3,2,\"column\",\"vertical\"]];\r\n\r\nfunction Tile_container(value) {\r\n  \r\n    const {profile,setprofile}=useContext(UserContext)\r\n    const {gameState,setgameState}=useContext(GamesContext)\r\n    const {playerlistState,setplayerlistState}=useContext(PlayerListContext)\r\n    const {boardState,setboardState}=useContext(BlocksContext)\r\n    const playerlistRef=useRef(null);\r\n    const gamestateRef=useRef(null);\r\n    const boardstateRef=useRef(null);\r\n    playerlistRef.current=playerlistState\r\n    gamestateRef.current=gameState\r\n    boardstateRef.current=boardState\r\n\r\n    const container_name=\"tile_container \"+positions[value.player_num][3]\r\n    const containerstyle={\r\n      gridColumn:positions[value.player_num][0],\r\n      gridRow:positions[value.player_num][1],\r\n    }\r\n    const holderstyle={\r\n      display:\"flex\",\r\n      flexDirection:positions[value.player_num][2]\r\n    }\r\n    useEffect(()=>{\r\n      \r\n      let your_index_challenge = (gameState.your_index==playerlistState.length-1) ? 0 : gameState.your_index+1\r\n      let temp_playerlist=[...playerlistState]\r\n      if(gameState.player_turn==gameState.your_index){\r\n        temp_playerlist[gameState.your_index].delete_active=true\r\n        temp_playerlist[gameState.your_index].tiles.forEach(tile=>{tile.active=true})\r\n        setplayerlistState(temp_playerlist)\r\n      }else{\r\n        temp_playerlist[gameState.your_index].tiles.forEach(tile=>{tile.active=false})\r\n        setplayerlistState(temp_playerlist)\r\n      }\r\n      if(gameState.player_turn!=your_index_challenge){  \r\n        temp_playerlist[gameState.your_index].challenge_active=true\r\n        setplayerlistState(temp_playerlist)\r\n      }else{\r\n        temp_playerlist[gameState.your_index].challenge_active=false\r\n        setplayerlistState(temp_playerlist)\r\n      }\r\n    },[gameState.player_turn])\r\n\r\n    \r\n    const [{isOver},drop] = useDrop(()=>({\r\n      accept: \"active\",\r\n      collect:monitor=>({\r\n          isOver:!!monitor.isOver(),\r\n      }),\r\n      canDrop: playerlistRef[gamestateRef.current.your_index].active,\r\n      drop: (tile)=> addDelete(tile),\r\n    })); \r\n    function container_delete_state(){\r\n\r\n    }\r\n\r\n    function board_delete_state(board_index,drag_block,delete_tile){\r\n      setboardState(prevboardState=>{\r\n        let newboardState=[...prevboardState]\r\n        newboardState.blocks[board_index]=drag_block\r\n        return newboardState\r\n      })\r\n      setplayerlistState(prevplayerlistState=>{\r\n        let newplayerlistState=[...prevplayerlistState] \r\n        newplayerlistState[gamestateRef.current.player_turn].delete_list.push(delete_tile) \r\n        return newplayerlistState\r\n      })\r\n    }\r\n\r\n    function addDelete(drop_tile){\r\n      let drag_block\r\n      let drag_container\r\n      let delete_tile\r\n      if (drop_tile.board_index) {\r\n        delete_tile=boardstateRef.current.blocks[drop_tile.board_index].content \r\n        delete_tile.container_index=undefined\r\n        delete_tile.board_index=undefined\r\n        drag_block=boardstateRef.current.blocks[drop_tile.board_index]\r\n        drag_block.content=null\r\n        board_delete_state(board_index,drag_block,delete_tile)\r\n      }else{\r\n        delete_tile=prevplayerlistState[gamestateRef.current.player_turn].tiles[drop_tile.container_index]\r\n        drag_container=newplayerlistState.tiles.filter(tile=>tile.id!=drop_tile.id);\r\n        for (let i=0;i<drag_container.length;i++){drag_container[i].container_index=i}\r\n        \r\n      }\r\n      \r\n      \r\n      gamestateRef.current.socket.emit(\"emit_delete_tile\",{\r\n        room_id:gamestateRef.current.room_id,\r\n        player_turn:gamestateRef.current.player_turn,\r\n        drag_board:(drop_tile.board_index)?drag_block:drop_tile.board_index,   \r\n        drag_container:(drop_tile.container_index)?drag_container:drop_tile.container_index,\r\n        tile:delete_tile,\r\n      })\r\n    }\r\n    useEffect(()=>{\r\n      gamestateRef.current.socket.on(\"delete_tile\")\r\n    },[])\r\n    \r\n    return (\r\n      \r\n      <div className={container_name} style={containerstyle}>\r\n          <div className=\"name_display\">{playerlistState[value.player_num].username}</div>   \r\n          <div className=\"score_display\">{playerlistState[value.player_num].score}</div> \r\n          <div className=\"tile_holder\" style={holderstyle}>\r\n\r\n              \r\n                {playerlistState[value.player_num].tiles.map((tile,pos)=>(\r\n                  <Tile tile={tile} orientation={positions[value.player_num][2]} key={pos}/>\r\n                ))}  \r\n              \r\n          </div>\r\n          <button type=\"button\" ref={drop} className=\"challengebtn\" visibility={playerlistState[value.player_num].challenge_active?\"visible\":\"hidden\"}>Challenge</button> \r\n          <img src=\".../UI_component/delete.png\" className=\"delete_img\" visibility={playerlistState[value.player_num].delete_active?\"visible\":\"hidden\"} />                \r\n      </div>\r\n    );\r\n    \r\n  }\r\n    \r\nexport default Tile_container;"]},"metadata":{},"sourceType":"module"}