{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TzeHaoTay\\\\Desktop\\\\CS\\\\scrabble2\\\\frontend\\\\src\\\\Games_page\\\\Main_game\\\\Joingame.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { UserContext, SocketContext } from '../../UserContext.js';\nimport io from 'socket.io-client';\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction usePrevious(value) {\n  _s();\n\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    if (value.length) {\n      ref.current = value;\n    } else {\n      ref.current = [1];\n      ref.current.pop();\n    }\n\n    ;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nfunction Joingame() {\n  _s2();\n\n  const {\n    profile,\n    setprofile\n  } = useContext(UserContext);\n  const [other_player, set_other_player] = useState([]);\n  const room_id = useParams().room_id;\n  let prev_other_player = usePrevious(other_player);\n  const websocket = useContext(SocketContext);\n  useEffect(() => {\n    websocket.current.emit(\"emit_join_game\", profile.username, room_id);\n    websocket.current.on(\"join_game\", username => {\n      set_other_player(oldArray => [...oldArray, username + \" has joined the game\"]);\n    });\n  }, []);\n  useEffect(() => {\n    if (prev_other_player) {\n      if (other_player.length > prev_other_player.length) {\n        setTimeout(() => {\n          set_other_player(prevActions => // Filter out the item with the matching index\n          prevActions.filter((value, i) => i !== 0));\n        }, 3000);\n      }\n    }\n  }, [other_player]);\n\n  if (other_player) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Joingame\",\n      children: other_player.map(Sentence => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: Sentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 45\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  } else {\n    return null;\n  }\n}\n\n_s2(Joingame, \"l812IA6JnRXCH0bR8UzIqvLEp4Y=\", false, function () {\n  return [useParams, usePrevious];\n});\n\n_c = Joingame;\nexport default Joingame;\n\nvar _c;\n\n$RefreshReg$(_c, \"Joingame\");","map":{"version":3,"sources":["C:/Users/TzeHaoTay/Desktop/CS/scrabble2/frontend/src/Games_page/Main_game/Joingame.js"],"names":["UserContext","SocketContext","io","React","useState","useContext","useEffect","useRef","useParams","usePrevious","value","ref","length","current","pop","Joingame","profile","setprofile","other_player","set_other_player","room_id","prev_other_player","websocket","emit","username","on","oldArray","setTimeout","prevActions","filter","i","map","Sentence"],"mappings":";;;;AAAA,SAAQA,WAAR,EAAoBC,aAApB,QAAwC,sBAAxC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAwBC,UAAxB,EAAmCC,SAAnC,EAA6CC,MAA7C,QAA0D,OAA1D;AACA,SAAQC,SAAR,QAAwB,kBAAxB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB;AACA;AACA,QAAMC,GAAG,GAAGJ,MAAM,EAAlB,CAHwB,CAKxB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,CAACE,MAAV,EAAiB;AACfD,MAAAA,GAAG,CAACE,OAAJ,GAAcH,KAAd;AACD,KAFD,MAEK;AACHC,MAAAA,GAAG,CAACE,OAAJ,GAAc,CAAC,CAAD,CAAd;AACAF,MAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ;AAGD;;AACD;AACD,GAVQ,EAUN,CAACJ,KAAD,CAVM,CAAT,CANwB,CAgBX;AAEb;;AACA,SAAOC,GAAG,CAACE,OAAX;AACD;;GApBMJ,W;;AAsBT,SAASM,QAAT,GAAoB;AAAA;;AAChB,QAAM;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAqBZ,UAAU,CAACL,WAAD,CAArC;AACA,QAAM,CAACkB,YAAD,EAAcC,gBAAd,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMgB,OAAO,GAACZ,SAAS,GAAGY,OAA1B;AACA,MAAIC,iBAAiB,GAAGZ,WAAW,CAACS,YAAD,CAAnC;AACA,QAAMI,SAAS,GAACjB,UAAU,CAACJ,aAAD,CAA1B;AAGAK,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,SAAS,CAACT,OAAV,CAAkBU,IAAlB,CAAuB,gBAAvB,EAAwCP,OAAO,CAACQ,QAAhD,EAAyDJ,OAAzD;AACAE,IAAAA,SAAS,CAACT,OAAV,CAAkBY,EAAlB,CAAqB,WAArB,EAAkCD,QAAQ,IAAE;AAACL,MAAAA,gBAAgB,CAACO,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAaF,QAAQ,GAAG,sBAAxB,CAAb,CAAhB;AAA8E,KAA3H;AACH,GAHQ,EAGP,EAHO,CAAT;AAKAlB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAGe,iBAAH,EAAqB;AACrB,UAAIH,YAAY,CAACN,MAAb,GAAsBS,iBAAiB,CAACT,MAA5C,EAAoD;AAClDe,QAAAA,UAAU,CAAC,MAAM;AACfR,UAAAA,gBAAgB,CAACS,WAAW,IAC1B;AACAA,UAAAA,WAAW,CAACC,MAAZ,CAAmB,CAACnB,KAAD,EAAQoB,CAAR,KAAcA,CAAC,KAAK,CAAvC,CAFc,CAAhB;AAGD,SAJS,EAIP,IAJO,CAAV;AAKD;AAAC;AACH,GAVM,EAUJ,CAACZ,YAAD,CAVI,CAAT;;AAYA,MAAGA,YAAH,EAAgB;AACd,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACOA,YAAY,CAACa,GAAb,CAAkBC,QAAD,iBAAY;AAAA,kBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,cAA7B;AADP;AAAA;AAAA;AAAA;AAAA,YADF;AAIE,GALJ,MAKQ;AAAC,WAAO,IAAP;AAAa;AACvB;;IA/BMjB,Q;UAGSP,S,EACUC,W;;;KAJnBM,Q;AAiCT,eAAeA,QAAf","sourcesContent":["import {UserContext,SocketContext} from '../../UserContext.js'\r\nimport io from 'socket.io-client'\r\nimport React, {useState,useContext,useEffect,useRef} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nfunction usePrevious(value) {\r\n    // The ref object is a generic container whose current property is mutable ...\r\n    // ... and can hold any value, similar to an instance property on a class\r\n    const ref = useRef();\r\n  \r\n    // Store current value in ref\r\n    useEffect(() => {\r\n      if (value.length){\r\n        ref.current = value\r\n      }else{\r\n        ref.current = [1]\r\n        ref.current.pop()\r\n        \r\n        \r\n      }\r\n      ;\r\n    }, [value]); // Only re-run if value changes\r\n    \r\n    // Return previous value (happens before update in useEffect above)\r\n    return ref.current;\r\n  }\r\n\r\nfunction Joingame() {\r\n    const {profile,setprofile}=useContext(UserContext)\r\n    const [other_player,set_other_player] = useState([])\r\n    const room_id=useParams().room_id\r\n    let prev_other_player = usePrevious(other_player);\r\n    const websocket=useContext(SocketContext)\r\n\r\n\r\n    useEffect(() => {\r\n        websocket.current.emit(\"emit_join_game\",profile.username,room_id)\r\n        websocket.current.on(\"join_game\", username=>{set_other_player(oldArray => [...oldArray,username + \" has joined the game\"])})\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n      \r\n        if(prev_other_player){\r\n        if (other_player.length > prev_other_player.length) {\r\n          setTimeout(() => {\r\n            set_other_player(prevActions => (\r\n              // Filter out the item with the matching index\r\n              prevActions.filter((value, i) => i !== 0)))\r\n          }, 3000);\r\n        }}\r\n      }, [other_player]);\r\n    \r\n    if(other_player){\r\n      return (\r\n        <div className=\"Joingame\">\r\n              {other_player.map((Sentence)=><span>{Sentence}</span>)}              \r\n        </div>\r\n      )}else{return(null)}\r\n  }\r\n\r\nexport default Joingame;"]},"metadata":{},"sourceType":"module"}